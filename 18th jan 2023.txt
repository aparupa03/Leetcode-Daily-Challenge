//Maximum Sum Circular Subarray

class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
// This solution is very similar to the regular maximum subarray solution 
// But, instead of only calculating the maximum subarray, we also calculate the minimum subarray.
// The reason is, that to find a maximum subarray in a circular array where it splits into to parts, we can find the minimum subarray and subtract it from the total sum and it will give us the same solution.

        int sum = 0, summax = 0, summin = 0, maximum = nums[0], minimum = nums[0];
        for(auto num : nums){
            sum += num;
            summax += num;
            summin += num;
            maximum = max(maximum, summax);
            minimum = min(minimum,summin);
            if(summax<0) summax = 0;
            if(summin>0) summin = 0;
        }
        if(sum == minimum) return maximum; // when all elements of array are negetive
        return max(maximum, sum-minimum);
    }
};